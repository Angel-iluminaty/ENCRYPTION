import base64
exec(base64.b64decode(b'Iy0tLS0tLS0tLS0tLS0gSU1QT1JUIC0tLS0tLS0tLS0tLSMKZnJvbSBvcyBpbXBvcnQgc3lzdGVtIGFzIGMKaW1wb3J0IG1hcnNoYWwKaW1wb3J0IGJhc2U2NAppbXBvcnQgemxpYgp0cnk6CiAgICBmcm9tIEN5dGhvbi5CdWlsZC5CdWlsZEV4ZWN1dGFibGUgaW1wb3J0IGJ1aWxkIGFzIGV4ZWN1dGUKZXhjZXB0OgogICAgYygnY2xlYXInKQojLS0tLS0tLS0tLS0tLS0tLSBMT0dPIC0tLS0tLS0tLS0tIwpsb2dvPScnJwoKCuKVlOKVkOKVkOKVkOKVpuKVkOKVl+KUgOKVlOKVpuKVkOKVkOKVkOKVlwrilZHilZTilZDilZDilaPilZHilZrilZfilZHilZHilZTilZDilZfilZEK4pWR4pWa4pWQ4pWQ4pWj4pWU4pWX4pWa4pWd4pWR4pWR4pSA4pWa4pWdCuKVkeKVlOKVkOKVkOKVo+KVkeKVmuKVl+KVkeKVkeKVkeKUgOKVlOKVlwrilZHilZrilZDilZDilaPilZHilIDilZHilZHilZHilZrilZDilZ3ilZEK4pWa4pWQ4pWQ4pWQ4pWp4pWd4pSA4pWa4pWQ4pWp4pWQ4pWQ4pWQ4pWdCuKVlOKVkOKVkOKVkOKVpuKVl+KUgOKUgOKVlOKVpuKVkOKVkOKVkOKVkOKVpuKVl+KUgOKVlOKVpuKVkOKVkOKVkOKVpuKVkOKVl+KUgOKVlOKVlwrilZHilZTilZDilZfilZHilZrilZfilZTilZ3ilZHilZTilZfilZTilZfilZHilZHilIDilZHilZHilZTilZDilZfilZHilZHilZrilZfilZHilZEK4pWR4pWa4pWQ4pWd4pWg4pWX4pWa4pWd4pWU4pWp4pWd4pWR4pWR4pWa4pWj4pWa4pWQ4pWd4pWR4pWR4pSA4pWR4pWR4pWU4pWX4pWa4pWd4pWRCuKVkeKVlOKVkOKVkOKVneKVmuKVl+KVlOKVneKUgOKUgOKVkeKVkeKUgOKVkeKVlOKVkOKVl+KVkeKVkeKUgOKVkeKVkeKVkeKVmuKVl+KVkeKVkQrilZHilZHilIDilIDilIDilIDilZHilZHilIDilIDilIDilZHilZHilIDilZHilZHilIDilZHilZHilZrilZDilZ3ilZHilZHilIDilZHilZHilZEK4pWa4pWd4pSA4pSA4pSA4pSA4pWa4pWd4pSA4pSA4pSA4pWa4pWd4pSA4pWa4pWd4pSA4pWa4pWp4pWQ4pWQ4pWQ4pWp4pWd4pSA4pWa4pWQ4pWdCiAgICAgIENyZWFkb3I6IEFuZ2VsIERlbCBWaWxsYXIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKCicnJwojLS0tLS0tLS0tLS0tLS0tIENMRUFSIEZVTkNUSU9OIC0tLS0tLS0tLS0tLS0jCmRlZiBjbGVhcigpOgogICAgYygnY2xlYXInKQogICAgcHJpbnQobG9nbykKICAgIHByaW50KDQwKictJykKICAgIHByaW50KCcgVGVsZWdyYW06IGh0dHBzOi8vdC5tZS8rN1VlbkxFbXVyczlpTmpKaCAnKQogICAgcHJpbnQoJyBHSVRIVUIgIDogaHR0cHM6Ly9naXRodWIuY29tL0FuZ2VsLWlsdW1pbmF0eScpCiAgICBwcmludCg0MConLScpCiMtLS0tLS0tLS0tLSBNQUlOIEZVTkNUSU9OIC0tLS0tLS0tLS0tLSMKZGVmIG1haW4oKToKICAgIGNsZWFyKCkKICAgIHByaW50KCcgW0FdIE1BUlNIQUwgRU5DUllQVElPTiAnKQogICAgcHJpbnQoJyBbQl0gQkFTRTY0ICBFTkNSWVBUSU9OICcpCiAgICBwcmludCgnIFtDXSBaTElCICAgIEVOQ1JZUFRJT04gJykKICAgIHByaW50KCcgW0VdIEVYSVQgVEVSTUlOQUwgJykKICAgIHByaW50KDQwKictJykKICAgIG9wdGlvbj1pbnB1dCgnIFs/XSBNRU7DmiBERSBFTEVDQ0nDk04gOiAnKQogICAgaWYgb3B0aW9uIGluIFsnYScsJ0EnXToKICAgICAgICBtYXJzaGFsX2VuYygpCiAgICBlbGlmIG9wdGlvbiBpbiBbJ2InLCdCJ106CiAgICAgICAgYmFzZTY0X2VuYygpCiAgICBlbGlmIG9wdGlvbiBpbiBbJ2MnLCdDJ106CiAgICAgICAgemxpYl9lbmMoKQogICAgZWxpZiBvcHRpb24gaW4gWydkJywnRCddOgogICAgICAgIGN5dGhvbl9leGVjdXRhYmxlKCkKICAgIGVsc2U6CiAgICAgICAgZXhpdCgnIFRPT0wgRVhJVEVEIDovJykKIy0tLS0tLS0tLS0tIE1BUlNIQUwgRU5DUllQVElPTiAtLS0tLS0tLS0tLS0tLSMKZGVmIG1hcnNoYWxfZW5jKCk6CiAgICBjbGVhcigpCiAgICBmaWxlPWlucHV0KCcgSU5HUkVTRSBFTCBOT01CUkUgREVMIEFSQ0hJVk8gOiAnKQogICAgZmlsZXg9aW5wdXQoJyBJTkdSRVNFIEVMIE5PTUJSRSBERUwgQVJDSElWTyBERSBTQUxJREEgOiAnKQogICAgdHJ5OgogICAgICAgIGZpbGVfb3Blbj1vcGVuKGZpbGUsJ3InKS5yZWFkKCkKICAgIGV4Y2VwdDoKICAgICAgICBleGl0KCcgRVJST1IgREUgQVJDSElWTyBOTyBFTkNPTlRSQURPICEhJykKICAgIGNvbXBpbGV4PWNvbXBpbGUoZmlsZV9vcGVuLCdkZycsJ2V4ZWMnKQogICAgZHVtcD1tYXJzaGFsLmR1bXBzKGNvbXBpbGV4KQogICAgcnVuX2NvZGU9ZidpbXBvcnQgbWFyc2hhbCBcbmV4ZWMobWFyc2hhbC5sb2Fkcyh7ZHVtcH0pKScKICAgIG91dF9wdXQ9b3BlbihmaWxleCwndycpCiAgICBvdXRfcHV0LndyaXRlKHJ1bl9jb2RlKQogICAgb3V0X3B1dC5jbG9zZSgpCiAgICBwcmludCg0MConLScpCiAgICBwcmludCgnIFvinJPinJNdIEVOQ1JZUFRJT04gQ09NUExFVEEgOi8gJykKICAgIHByaW50KCcgW+Kck+Kck10gQVJDSElWTyBERSBTQUxJREEgR1VBUkRBUiBDT01PIDogJytmaWxleCkKIy0tLS0tLS0tLS0gQkFTRTY0IEVOQ1JZUFRJT04gLS0tLS0tLS0tLS0tIwpkZWYgYmFzZTY0X2VuYygpOgogICAgY2xlYXIoKQogICAgaW5wdXRfZmlsZT1pbnB1dCgnIElOR1JFU0UgTEEgUlVUQSBERUwgQVJDSElWTyAgOiAnKQogICAgb3V0cHV0X2ZpbGU9aW5wdXQoJyBJTkdSRVNFIExBIFJVVEEgREVMIEFSQ0hJVk8gREUgU0FMSURBIDogJykKICAgIHRyeToKICAgICAgICBmaWxlX29wZW49b3BlbihpbnB1dF9maWxlLCdyJykucmVhZCgpCiAgICBleGNlcHQ6CiAgICAgICAgZXhpdCgnIEVSUk9SIERFIEFSQ0hJVk8gTk8gRU5DT05UUkFETyAhIScpCiAgICBjb21waWxlPWJhc2U2NC5iNjRlbmNvZGUoZmlsZV9vcGVuLmVuY29kZSgpKQogICAgcnVuX2NvZGU9ZidpbXBvcnQgYmFzZTY0XG5leGVjKGJhc2U2NC5iNjRkZWNvZGUoe2NvbXBpbGV9KSknCiAgICBvdXRfcHV0PW9wZW4ob3V0cHV0X2ZpbGUsJ3cnKQogICAgb3V0X3B1dC53cml0ZShydW5fY29kZSkKICAgIG91dF9wdXQuY2xvc2UoKQogICAgcHJpbnQoJyBb4pyT4pyTXSBFTkNSWVBUSU9OIENPTVBMRVRFIDovJykKICAgIHByaW50KCcgW+Kck+Kck10gRU5DIEFSQ0hJVk8gR1VBUkRBUiBDT01PIDogJytvdXRwdXRfZmlsZSkKIy0tLS0tLS0tLS0tLS0tLS0gWkxJQiBFTkNSWVBUSU9OIC0tLS0tLS0tLS0tLS0tLS0tIwpkZWYgemxpYl9lbmMoKToKICAgIGNsZWFyKCkKICAgIHNyYz1pbnB1dCgnIElOR1JFU0UgTEEgUlVUQSBERUwgQVJDSElWTyAgOiAnKQogICAgc2F2ZV9maWxlPWlucHV0KCcgSU5HUkVTRSBMQSBSVVRBIERFTCBBUkNISVZPIERFIFNBTElEQSA6ICcpCiAgICB0cnk6CiAgICAgICAgc3JjX2ZpbGU9b3BlbihzcmMsJ3InKS5yZWFkKCkKICAgIGV4Y2VwdDoKICAgICAgICBleGl0KCcgRVJST1IgREUgQVJDSElWTyBOTyBFTkNPTlRSQURPICEhJykKICAgIGNvbXBpbGVfemxpYj16bGliLmNvbXByZXNzKHNyY19maWxlLmVuY29kZSgpKQogICAgcnVuX2NvZGU9ZidpbXBvcnQgemxpYlxuZXhlYyh6bGliLmRlY29tcHJlc3Moe2NvbXBpbGVfemxpYn0pLmRlY29kZSgpKScKICAgIG91dF9wdXQ9b3BlbihzYXZlX2ZpbGUsJ3cnKQogICAgb3V0X3B1dC53cml0ZShydW5fY29kZSkKICAgIG91dF9wdXQuY2xvc2UoKQogICAgcHJpbnQoJyBb4pyT4pyTXSBFTkNSWVBUSU9OIENPTVBMRVRBIDovJykKICAgIHByaW50KCcgW+Kck+Kck10gRU5DIEFSQ0hJVk8gR1VBUkRBUiBDT01PIDogJytzYXZlX2ZpbGUpCiMtLS0tLS0tLS0tLS0tLS0gQ1lUSE9OIEVYRUNVVEFCTEUgLS0tLS0tLS0tLS0tLS0tLS0jCmRlZiBjeXRob25fZXhlY3V0YWJsZSgpOgogICAgY2xlYXIoKQogICAgZmlsZT1pbnB1dCgnIElOR1JFU0UgTEEgUlVUQSBERUwgQVJDSElWTyA6ICcpCiAgICB0cnk6CiAgICAgICAgZmlsZXg9b3BlbihmaWxlLCdyJykucmVhZCgpCiAgICBleGNlcHQ6CiAgICAgICAgZXhpdCgnIEVSUk9SIERFIEFSQ0hJVk8gTk8gRU5DT05UUkFETyA6LycpCiAgICBlcnJvcj1maWxleC5yZXBsYWNlKCcJJywnICAgICcpCiAgICBzb2x2ZT1vcGVuKGZpbGUsJ3cnKS53cml0ZShlcnJvcikKICAgIGV4ZWN1dGUoZmlsZSkKICAgIGNsZWFyKCkKICAgIHByaW50KCcgW+Kck+Kck10gRUpFQ1VUQUJMRSBERSBDWVRIT04gQ09NUExFVE8gOiIpJykKICAgIHNhdmU9ZmlsZVs6LTNdCiAgICBwcmludCgnIFvinJPinJNdIEFSQ0hJVk8gRUpFQ1VUQUJMRSBHVUFSREFSIENPTU8gOiAnK3NhdmUpCiMtLS0tLS0tLS0tLS0tLS0tLSBFTkQgLS0tLS0tLS0tLS0tLS0jCm1haW4oKQ=='))